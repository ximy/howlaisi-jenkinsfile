// 提交流水线pipeline webhook xp://jenkins.howlaisi.com:30180/generic-webhook-trigger/invoke?token=sonar-tmall&urlParam=urlParamValue

@Library('howlaisi-shared-library@master') _

pipeline {
    agent {
        node {
            label "maven"
        }
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'TRIGGER_BRANCH_NAME', value: '$.ref', regexpFilter : 'refs\\/heads\\/', defaultValue: '', expressionType: 'JSONPath'],
            ],
			genericRequestVariables: [
                [key: 'urlParam', regexpFilter: '']
            ],
            token: 'sonar-tmall',
            causeString: ' Triggered by $TRIGGER_BRANCH_NAME, urlParm is $urlParam',
            printContributedVariables: true,
            printPostContent: true,
			// regexpFilterExpression: 'master',
			// regexpFilterText: '$TRIGGER_BRANCH_NAME',
			silentResponse: true
        )
    }
    parameters {
        string(
            name: 'PARAM_BRANCH_NAME',
            defaultValue:'master',
            description:'你需要选择哪条分支进行构建，可以自己输入'
        )
    }
    environment {
        // 由于外网速度慢，我使用的内网网址，因此此网址是访问不到的，其对应到的地址是：
        // http://gitlab.howlaisi.com:32058/opensource/tmall.git
        APP_REPO = "http://gitlab-node.infrastructure:32058/opensource/tmall.git"
    }
    stages {
        stage("计算分支") {
            steps {
                script {
//                     try {
//                         println("计算分支...")
//                         println("PARAM_BRANCH_NAME是: $PARAM_BRANCH_NAME")
//                         env.BRANCH_NAME = PARAM_BRANCH_NAME
//                         println("TRIGGER_BRANCH_NAME是： $TRIGGER_BRANCH_NAME")
//                         env.BRANCH_NAME = TRIGGER_BRANCH_NAME
//                     } catch (error) {
//                         println("捕获到了异常：")
//                         println("继续往下执行。。。" + error)
//                     } finally{
//                         println("BRANCH_NAME是： $BRANCH_NAME")
//                     }
                    gt.chooseBranchName()
                }
            }
        }
        stage("checkout代码") {
            steps {
                script {
                    sh "echo checkout代码 $BRANCH_NAME"
                    gt.checkout(APP_REPO, BRANCH_NAME, "opensource_id")
                     // 定义全局变量
                    env.COMMIT_USER = commitEnv.getCommitUser() // 提交者
                    env.COMMIT_ID   = commitEnv.getCommitId() // 提交ID
                    env.COMMIT_TIME = commitEnv.getCommitTime() // 提交时间
                    env.COMMIT_INFO = commitEnv.getCommitInfo() // 提交信息
                }
                sh "du -h --max-depth=1"
            }
        }
        stage("代码质量扫描") {
            agent none
            steps {
                container('maven') {
                    script {
                        env.sonarProjectName = tools.getSonarProjectName(APP_REPO, BRANCH_NAME, "frontend")
                        withSonarQubeEnv('sonar') {
                            sh 'ls -al'
                            sh "mvn clean package sonar:sonar -Dsonar.projectName=${sonarProjectName} -Dsonar.projectKey=${sonarProjectName} -f pom.xml"
                        }
                    }
                }
            }
        }
        stage('检查结果分析') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        // 等待sonarqube结果回调过来
                        def qg = waitForQualityGate()
                        echo "结果状态: ${qg.status}"
                        if (qg.status != 'OK') {
                            echo "未通过Sonarqube的代码质量阈检查，请及时修改！failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script{
                // 打印commit信息至jenkins历史记录
                howlaisiBuildInfo.printBuildInfo(COMMIT_USER, COMMIT_ID, COMMIT_TIME, COMMIT_INFO)
            }
            sh "printenv"
        }
        success {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建成功结果通知")
            }
        }
        failure {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建失败结果通知")
            }
        }
        aborted {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建被终止结果通知")
            }
        }
    }
}