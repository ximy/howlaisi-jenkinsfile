@Library('howlaisi-shared-library@master') _

pipeline {
    agent {
        node {
            label "maven"
        }
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'TRIGGER_BRANCH_NAME', value: '$.ref', regexpFilter : 'refs\\/heads\\/', defaultValue: '', expressionType: 'JSONPath'],
            ],
			genericRequestVariables: [
                [key: 'urlParam', regexpFilter: '']
            ],
            token: 'tmall-backend-sonar',
            causeString: ' Triggered by $TRIGGER_BRANCH_NAME, urlParm is $urlParam',
            printContributedVariables: true,
            printPostContent: true,
			regexpFilterExpression: 'master',
			regexpFilterText: '$TRIGGER_BRANCH_NAME',
			silentResponse: true
        )
    }

    parameters {
        choice(
          description: "你需要选择哪条分支进行构建?",
          name: "branch_name",
          choices: ["master"]
        )
    }
    environment {
        // 自建镜像仓库地址
        docker_hub = "k8s-harbor:30002"

        // 自建harbor仓库的namespace
        docker_hub_namespace = "tmall"

        // 在jenknis或kubesphere上面的凭证
        docker_hub_id = "tmall-zhangjialin-myself-harbor-account"

        // k8s 上面的 namespace
        k8s_namespace = "tmall-project"

        // BUILD_NUMBER 这个变量从jenkins传递过来
        current_build_number = "${BUILD_NUMBER}"

        // 由于外网速度慢，我使用的内网网址，因此此网址是访问不到的，其对应到的地址是：
        // http://gitlab.howlaisi.com:32058/opensource/tmall.git
        APP_REPO = "http://gitlab-node.infrastructure:32058/opensource/tmall.git"
        APP_NAME = "tmall"
    }

    stages {
        stage("checkout代码") {
            steps {
                script {
                    gt.checkout(APP_REPO, branch_name, "opensource_id")
                     // 定义全局变量
                    env.COMMIT_USER = commitEnv.getCommitUser() // 提交者
                    env.COMMIT_ID   = commitEnv.getCommitId() // 提交ID
                    env.COMMIT_TIME = commitEnv.getCommitTime() // 提交时间
                    env.COMMIT_INFO = commitEnv.getCommitInfo() // 提交信息
                }
                sh "du -h --max-depth=1"
            }
        }
        stage ("打印相关变量") {
            steps{
                echo "docker_hub_namespace信息为: ${docker_hub_namespace}"
                // 获取commit信息，用于后面打tag
                echo "commit信息为：${env.COMMIT_ID}"
                echo "current_build_number信息为：${env.current_build_number}"
                script {
                    // 本端tag名
                    env.local_tag = "tmall:${current_build_number}_${COMMIT_ID}"
                    // 远端tag名，必须以这种方式命令，才能push到远端
                    env.remote_tag = "${docker_hub}/${docker_hub_namespace}/${local_tag}"
                    echo "local_tag信息为：${env.local_tag}"
                    echo "remote_tag信息为：${env.remote_tag}"
                }
            }
        }
        stage("打包镜像") {
            steps {
                script {
                    container ('maven') {
                        sh "mvn clean package -Dmaven.test.skip=true"
                        sh "docker build -t ${env.local_tag} -f ./Dockerfile ."
                        withCredentials([usernamePassword(credentialsId: "${docker_hub_id}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login http://k8s-harbor:30002 -u "$DOCKER_USERNAME" --password-stdin'
                            sh "docker tag ${env.local_tag} ${env.remote_tag}"
                            sh "docker push  ${env.remote_tag}"
                        }
                    }
                }
            }
        }
        stage("自动部署至k8s") {
            steps {
                container ("maven") {
                    sh 'envsubst < deploy.yaml | kubectl apply -f -'
                }
            }
        }
    }
    post {
        always {
            script{
                // 打印commit信息至jenkins历史记录
                howlaisiBuildInfo.printBuildInfo(COMMIT_USER, COMMIT_ID, COMMIT_TIME, COMMIT_INFO)
            }
            sh "printenv"
        }
        success {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建成功结果通知")
            }
        }
        failure {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建失败结果通知")
            }
        }
        aborted {
            script {
                // 构建成功发送通知
                wecom.sendTextMsg("13980797589","这是构建被终止结果通知")
            }
        }
    }
}