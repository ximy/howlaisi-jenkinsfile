@Library('howlaisi-shared-library@master') _

pipeline {
    agent {
        node {
            label "maven"
        }
    }

    parameters {
        choice(
          description: "你需要选择哪条分支进行构建?",
          name: "branch_name",
          choices: ["master"]
        )
    }
    environment {
        // 自建镜像仓库地址
        docker_hub = "k8s-harbor:30002"

        // 自建harbor仓库的namespace
        docker_hub_namespace = "tmall"

        // 在jenknis或kubesphere上面的凭证
        docker_hub_id = "tmall-zhangjialin-myself-harbor-account"

        // k8s 上面的 namespace
        k8s_namespace = "tmall-project"

        // BUILD_NUMBER 这个变量从jenkins传递过来
        current_build_number = "${BUILD_NUMBER}"

        // 由于外网速度慢，我使用的内网网址，因此此网址是访问不到的，其对应到的地址是：
        // http://gitlab.howlaisi.com:32058/opensource/tmall.git
        APP_REPO = "http://gitlab-node.infrastructure:32058/opensource/tmall.git"
    }

    stages {
        stage("checkout代码") {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${branch_name}"]],
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]],
                    userRemoteConfigs: [[credentialsId: 'opensource_id', url: "$APP_REPO"]]])
                script {
                     // 定义全局变量
                    env.COMMIT_ID   = howlaisiEnv.getCommitId() // 提交ID
                    env.COMMIT_USER = sh(script: 'git log --pretty=format:%an', returnStdout: true).trim() // 提交者
                    env.COMMIT_TIME = sh(script: 'git log --pretty=format:%ai', returnStdout: true).trim() // 提交时间
                    env.COMMIT_INFO = sh(script: 'git log --pretty=format:%s',  returnStdout: true).trim() // 提交信息
                    env._VERSION = sh(script: "echo `date '+%Y%m%d%H%M%S'`" + "_${COMMIT_ID}" + "_${env.BUILD_ID}", returnStdout: true).trim() // 对应构建的版本 时间+commitID+buildID
                }
                sh "du -h --max-depth=1"
            }
        }
        stage ("打印相关变量") {
            steps{
                echo "docker_hub_namespace信息为: ${docker_hub_namespace}"
                // 获取commit信息，用于后面打tag
                echo "commit信息为：${env.COMMIT_ID}"
                echo "current_build_number信息为：${env.current_build_number}"
                script {
                    // 本端tag名
                    env.local_tag = "tmall:${current_build_number}_${COMMIT_ID}"
                    // 远端tag名，必须以这种方式命令，才能push到远端
                    env.remote_tag = "${docker_hub}/${docker_hub_namespace}/${local_tag}"
                    echo "local_tag信息为：${env.local_tag}"
                    echo "remote_tag信息为：${env.remote_tag}"
                }
            }
        }
        stage("打包镜像") {
            steps {
                script {
                    container ('maven') {
                        sh "mvn clean package -Dmaven.test.skip=true"
                        sh "docker build -t ${env.local_tag} -f ./Dockerfile ."
                        withCredentials([usernamePassword(credentialsId: "${docker_hub_id}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login http://k8s-harbor:30002 -u "$DOCKER_USERNAME" --password-stdin'
                            sh "docker tag ${env.local_tag} ${env.remote_tag}"
                            sh "docker push  ${env.remote_tag}"
                        }
                    }
                }
            }
        }
        stage("自动部署至k8s") {
            agent none
            steps {
                container ("maven") {
                    // 这种方式启k8s是官方推荐的
                    sh 'envsubst < deploy.yaml | kubectl apply -f -'
                }
            }
        }
    }
    post {
        always {
            wrap([$class: 'BuildUser']){
                script{
                    currentBuild.description = "提交者: ${COMMIT_USER}" // 添加说明信息
                    currentBuild.description += "\nCOMMIT_ID: ${COMMIT_ID}" // 添加说明信息
                    currentBuild.description += "\n提交时间: ${COMMIT_TIME}" // 添加说明信息
                    currentBuild.description += "\n提交内容: ${COMMIT_INFO}" // 添加说明信息
                }
                sh "printenv"
            }
        }
    }
}